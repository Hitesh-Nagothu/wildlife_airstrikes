# -*- coding: utf-8 -*-
"""BirdStrikeProcessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pc3PmaGhz9EQcFPLg_0TqpFCy1SVOJwJ
"""

import pandas as pd
from datetime import datetime

df=pd.read_csv('BirdStrikesData.csv')
df['FlightDate']=pd.to_datetime(df['FlightDate'], format="%m/%d/%Y %H:%M")

#datetime.strftime(df['FlightDate'].apply(lambda x: x.strftime('%Y-%m-%d')))

"""Airport data"""

airports= df[["Airport: Name", 'Origin State']]
unique_airports=airports.drop_duplicates(["Airport: Name", 'Origin State'])

airports_dict={}
for index, row in unique_airports.iterrows():
  airports_dict[row["Airport: Name"]]=row["Origin State"]

final=pd.DataFrame(airports_dict.items(), columns=['airport_name', 'origin_state'])

final.to_csv(r'/content/sample_data/airports.csv')

"""Wildlife data"""

wildlife=df[["Wildlife: Species", "Wildlife: Size"]]
wildlife.drop_duplicates(inplace=True)
wildlife.to_csv(r'/content/sample_data/wildlife.csv')

"""Aircraft data"""

aircraft=df[["Aircraft: Make/Model", "Aircraft: Number of engines?","Aircraft: Type" ]]
aircraft.drop_duplicates(inplace=True)
aircraft=aircraft.rename(columns={"Aircraft: Make/Model":"aircraft_model", "Aircraft: Number of engines?":"engines","Aircraft: Type":"aircraft_type"})
aircraft.to_csv('/content/sample_data/aircraft.csv', index=False)

"""BirsStrikes data"""

wildlife=pd.read_csv('wildlife.csv')
results=[]
for index, row in df.iterrows():

  record_id=row['Record ID']
  altitude=row['Altitude bin']
  wildlife_struck_actual=row['Wildlife: Number Struck Actual']
  effect_impact=row["Effect: Impact to flight"]
  effect_damage=row["Effect: Indicated Damage"]
  flight_date=row["FlightDate"]
  phase_of_flight=row["When: Phase of flight"]
  conditions_sky=row["Conditions: Sky"]
  remains_collected=row["Remains of wildlife collected?"]
  remains_sent=row["Remains of wildlife sent to Smithsonian"]
  remarks=row["Remarks"]
  #Retrieve wildlife id from wildlife table
  wildlife_species = row["Wildlife: Species"] 
  wildlife_id=wildlife.loc[wildlife['wildlife_species']==wildlife_species].head(1)

  wildlife_id_scalar=wildlife_id['wildlife_id'].tolist()[0]

  warning=row['Pilot warned of birds or wildlife?']
  cost=row["Cost: Total $"]
  injuries=row["Number of people injured"]

  warning =1 if warning=='Y' else 0

  if altitude=="< 1000 ft":
    altitude=0
  else:
    altitude=1

  if effect_impact=="":
    effect_impact="NULL"

  if effect_damage=="":
    effect_damage="NULL"

  if phase_of_flight=="":
    phase_of_flight="NULL"

  if conditions_sky=="":
    conditions_sky="NULL"

  if remains_collected=="TRUE":
    remains_collected=1
  else:
    remains_collected=0

  if remains_sent=="TRUE":
    remains_sent=1
  else:
    remains_sent=0

  cost=int(cost.replace(",",""))

  results.append([record_id, altitude, wildlife_struck_actual, effect_impact, effect_damage, flight_date, phase_of_flight,conditions_sky, remains_collected, remains_sent, remarks, wildlife_id_scalar, warning, cost, injuries])

  
  
birdstrikes=pd.DataFrame(results, columns=['record_id', 'altitude', 'wildlife_struck_actual', 'effect_impact', 'effect_damage', 'flight_date', 'phase_of_flight','conditions_sky', 'remains_collected', 'remains_sent', 'remarks', 'wildlife_id', 'warning', 'cost', 'injuries'])
birdstrikes.to_csv('/content/sample_data/birsstrikes.csv', index=False)

"""Airlineaircraftbridge"""

bridge={}

for index, row in df.iterrows():
  airline_name=row['Aircraft: Airline/Operator']
  airline_id_df=airline.loc[airline['Airline_name'] == airline_name]
  airline_id=airline_id_df['Airline_id'].tolist()
  aircraft_model=row['Aircraft: Make/Model']
  
  if len(airline_id)>0:
    bridge[airline_id[0]]=aircraft_model
  #print("Aircraft_id {}Aircraft model {}, Airline_id {}".format(position, aircraft_model, airline_id))

bridge_df=pd.DataFrame(bridge.items(), columns=['airline_id', 'aircraft_model'])
new_index= [i for i in range(1, len(bridge)+1)]
bridge_df.index=new_index
bridge_df.to_csv('/content/sample_data/airlineaircraftbridge.csv')



"""AirportaircraftBridge"""

results=[]
df=pd.read_csv('BirdStrikesData.csv')
airline=pd.read_csv('airlines.csv')
airport=pd.read_csv('airports.csv')
airlineaircraftbridge=pd.read_csv('airlineaircraftbridge.csv')

for index, row in df.iterrows():
  record_id=row['Record ID']
  airport_name=row['Airport: Name']
  airport_id=airport.loc[airport['airport_name']==airport_name]['aiport_id'].tolist()
  aircraft_model=row['Aircraft: Make/Model']
  aircraft_id=airlineaircraftbridge.loc[airlineaircraftbridge['aircraft_model']==aircraft_model].head(1)
  aircraft_id_scalar=aircraft_id['aircraft_id'].tolist()
  if not aircraft_id_scalar:
    aircraft_id_scalar=[1]

  if not airport_id:
    airport_id=[0]
  
  results.append([record_id, aircraft_id_scalar[0], airport_id[0] ])


aircraftairportbridge=pd.DataFrame(results, columns=['record_id', 'aircraft_id', 'airport_id'])
aircraftairportbridge.to_csv('/content/sample_data/aircraftairportbridge.csv',index=False)

"""Precipitation Data"""

results=[]

for index, row in df.iterrows():
  record_id=row['Record ID']
  precipitation=row['Conditions: Precipitation']
  precipitationTypes=precipitation.split(",")

  
  if len(precipitationTypes)>1:
    for item in precipitationTypes:
      item=item.strip()
      results.append([record_id, item])
    continue

  prec=precipitationTypes[0].strip()
  results.append([record_id, precipitationTypes[0]])


precipitation_df=pd.DataFrame(results, columns=['record_id', 'precipitation_type'])
precipitation_df.to_csv('/content/sample_data/precipitation.csv',index=False)







